{"version":3,"sources":["webpack:///./src/pages/jabber.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/layout.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/seo.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/experienceLayout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_seo__WEBPACK_IMPORTED_MODULE_3__","_components_experienceLayout__WEBPACK_IMPORTED_MODULE_4__","styled_components__WEBPACK_IMPORTED_MODULE_5__","Lozenges","styled","span","withConfig","displayName","componentId","TechWrapper","div","TECH_STACK","JabberPage","a","createElement","header","subtitle","title","map","tech","href","m","module","exports","require","default","GlobalStyle","createGlobalStyle","_templateObject","LayoutContainer","Layout","_ref","children","react__WEBPACK_IMPORTED_MODULE_1___default","propTypes","PropTypes","node","isRequired","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","React","createContext","object","string","func","SEO","description","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","array","arrayOf","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","react__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_3__","_layout__WEBPACK_IMPORTED_MODULE_4__","ExperienceLayoutWrapper","HomeLink","p","ExperienceLayoutHeader","h1","ExperienceLayoutSubtitle","ExperienceLayout","to"],"mappings":"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","file":"component---src-pages-jabber-js-1403dfcfef71b7435748.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ExperienceLayout from \"../components/experienceLayout\"\nimport styled from \"styled-components\"\n\nconst Lozenges = styled.span`\n  padding: 3px 8px;\n  letter-spacing: 0.5px;\n  font-weight: bold;\n  margin-right: 5px;\n  border-radius: 5px;\n  font-size: 12px;\n  text-transform: uppercase;\n  color: #5885b2;\n  background-color: #cbe5ff;\n`\n\nconst TechWrapper = styled.div`\n  margin-bottom: 20px;\n`\n\nconst TECH_STACK = [\"react\", \"express\", \"styled components\"]\n\nconst JabberPage = () => (\n  <ExperienceLayout header=\"Jabber\" subtitle=\"Side Project\">\n    <SEO title=\"jabber\" />\n    <TechWrapper>\n      {TECH_STACK.map(tech => (\n        <Lozenges>{tech}</Lozenges>\n      ))}\n    </TechWrapper>\n    <a href=\"https://github.com/christiannguyen/jabber\">Github Repo</a>\n    <h3>Work in Progress</h3>\n    <p>\n      Currently not hosted anywhere yet. Main idea was just to learn and play\n      around with React Hooks and some other frontend things I've never really\n      touched such as styled-components. Worked with Indeed's API to grab a list\n      of postings. Express backend handles making the request to Indeed's API\n      and parsed/organized in the backend. The data is then passed frontend to\n      be displayed.\n    </p>\n  </ExperienceLayout>\n)\n\nexport default JabberPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled, { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: \"Avenir\", sans-serif;\n    font-size: 16px;\n    margin-top: 30px;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n\nconst LayoutContainer = styled.div`\n  display: flex;\n  margin-top: 100px;\n  width: 35%;\n  margin: auto;\n  flex-direction: column;\n\n  @media (max-width: 800px) {\n    width: 50%;\n  }\n\n  @media (max-width: 450px) {\n    width: 80%;\n  }\n`;\n\nconst Layout = ({ children }) => (\n  <LayoutContainer>\n    <GlobalStyle />\n    {children}\n  </LayoutContainer>\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport styled from 'styled-components';\nimport { Link } from \"gatsby\"\nimport Layout from './layout';\n\nconst ExperienceLayoutWrapper = styled.div`\n  margin-bottom: 40px;\n`;\n\nconst HomeLink = styled.p`\n  a {\n    text-transform: uppercase;\n  }\n`;\n\nconst ExperienceLayoutHeader = styled.h1`\n  margin: 10px 0 0 0;\n`;\n\nconst ExperienceLayoutSubtitle = styled.span`\n  font-weight: 500;\n  margin-bottom: 10px;\n`;\n\nconst ExperienceLayout = ({ children, header, subtitle }) => (\n  <Layout>\n    <ExperienceLayoutWrapper>\n\n    <HomeLink><Link to='/'>Home</Link></HomeLink>\n    <ExperienceLayoutHeader>{header}</ExperienceLayoutHeader>\n    <ExperienceLayoutSubtitle>{subtitle}</ExperienceLayoutSubtitle>\n    {children}\n    </ExperienceLayoutWrapper>\n  </Layout>\n)\n\nexport default ExperienceLayout;\n"],"sourceRoot":""}