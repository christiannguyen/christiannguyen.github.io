{"version":3,"sources":["webpack:///./src/pages/marketo.js","webpack:///./src/components/imagesWrapper.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/layout.js","webpack:///./src/components/header.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/experienceLayout.js","webpack:///./src/components/image.js","webpack:///./src/images/livefeedEngagement.png","webpack:///./src/images/livefeedTasks.png"],"names":["tasks","styled","div","withConfig","displayName","componentId","MarketoPage","react_default","a","createElement","experienceLayout","header","subtitle","map","task","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","__webpack_exports__","React","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","GlobalStyle","createGlobalStyle","_templateObject","LayoutContainer","Layout","_ref","children","react__WEBPACK_IMPORTED_MODULE_1___default","propTypes","node","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","styled_components__WEBPACK_IMPORTED_MODULE_3__","HeaderWrapper","HeaderTitle","h1","HeaderDescription","p","Header","siteTitle","defaultProps","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","description","lang","meta","keywords","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","array","arrayOf","react__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_3__","_layout__WEBPACK_IMPORTED_MODULE_4__","HomeLink","ExperienceLayoutHeader","ExperienceLayoutSubtitle","span","ExperienceLayout","to","img"],"mappings":"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","file":"component---src-pages-marketo-js-86938d3d08ce840017eb.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport LivefeedEngagementSrc from \"../images/livefeedEngagement.png\";\nimport LivefeedEngagementTasks from \"../images/livefeedTasks.png\";\nimport ExperienceLayout from '../components/experienceLayout'\nimport Image from \"../components/image\";\nimport ImageWrapper from \"../components/imagesWrapper\";\n\nconst tasks = [\n  'worked on several small and big projects (frontend and backend)',\n  'helped upgrade frontend packages to improve performance (babel, webpack, react, ...etc)',\n  'led a project and currently leading another one',\n  'debugged customer and QA issues',\n  'added prettier into frontend app',\n  'colloborated with product managers and UX designer',\n]\n\nconst MarketoPage = () => (\n    // <SEO title=\"marketo\" />\n    <ExperienceLayout header=\"Marketo, an Adobe Company\" subtitle=\"Associate Frontend Software Engineer\">\n      <p>\n        Since joining Marketo in November 2017, I've worked on several projects, learned a lot of technical and soft skills, and made great friendships.\n        This was my first full-time software engineering job so I was definitely eager and ready to learn everything I could.\n        {/* <ImageWrapper>\n          <Image src={LivefeedEngagementSrc} />\n          <Image src={LivefeedEngagementTasks} />\n        </ImageWrapper> */}\n      </p>\n      <span>Some tasks/accomplishments</span>\n      <ul>\n        {tasks.map((task) => <li>{task}</li>)}\n      </ul>\n      <h3>Projects I did</h3>\n      <h4>Livefeed</h4>\n        <span>\n          Mainly worked on the the frontend. Created a tab where users could create tasks (email, call, inmail) and take actions on it.\n          Collaborated with UX designer to help with designing the look and feel.\n        </span>\n      <h4>Outlook Email Reply Tracking</h4>\n        <span>Worked with Microsoft's Outlook REST and SOAP APIs to monitor a user's inbox and figure out </span>\n      <h4>Marketo Unsubscribes Check</h4>\n        <span>\n          Had to use Marketo's APIs to check against their database. This would check to see if a particular email was unsubscribed or not\n          from emails. If so, we would have to render the correct error messaging on the frontend. We'd have this check everywhere in an app where\n          an email was being created.\n        </span>\n    </ExperienceLayout>\n)\n\nexport default MarketoPage\n","import React from \"react\"\nimport styled from 'styled-components';\n\nconst ImageWrapperContainer = styled.div`\n\n`;\n\nconst ImageWrapper = ({ children }) => (\n  <ImageWrapperContainer>\n    {children}\n  </ImageWrapperContainer>\n);\n\nexport default ImageWrapper;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled, { createGlobalStyle } from 'styled-components';\n\nimport Header from \"./header\"\n\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: \"Avenir\", sans-serif;\n    font-size: 16px;\n    margin-top: 30px;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n\nconst LayoutContainer = styled.div`\n  display: flex;\n  margin-top: 100px;\n  width: 35%;\n  margin: auto;\n  flex-direction: column;\n`;\n\nconst Layout = ({ children }) => (\n  <LayoutContainer>\n    <GlobalStyle />\n    {children}\n  </LayoutContainer>\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport styled from 'styled-components';\n// import Toggle from 'react-toggle'\n// import \"react-toggle/style.css\"\n{/* <Toggle\ndefaultChecked={true}\nicons={false}\n// onChange={this.handleBaconChange}\n/> */}\nconst HeaderWrapper = styled.div`\n\n`;\n\nconst HeaderTitle = styled.h1`\n\n`;\n\nconst HeaderDescription = styled.p`\n  line-height: 1.5;\n`;\n\nconst HeaderDescriptionText = `I'm currently a full stack software engineer currently living in San Francisco.\nI mainly enjoy writing code in the frontend (JavasSript & React) but also knowledgeable in the backend (Ruby on Rails & ExpressJS).\nI love learning and coding but also gymming, music festivals, and game of thrones.\n`\n\nconst Header = ({ siteTitle }) => (\n  <HeaderWrapper>\n\n      <HeaderTitle>HEY, I'M CHRISTIAN</HeaderTitle>\n    <HeaderDescription>{HeaderDescriptionText}</HeaderDescription>\n  </HeaderWrapper>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport styled from 'styled-components';\nimport { Link } from \"gatsby\"\nimport Layout from './layout';\n\nconst ExperienceLayoutWrapper = styled.div`\n\n`;\n\nconst HomeLink = styled.p`\n  a {\n    text-transform: uppercase;\n  }\n`;\n\nconst ExperienceLayoutHeader = styled.h1`\n  margin: 10px 0 0 0;\n`;\n\nconst ExperienceLayoutSubtitle = styled.span`\n  font-weight: 500;\n  margin-bottom: 10px;\n`;\n\nconst ExperienceLayout = ({ children, header, subtitle }) => (\n  <Layout>\n    <HomeLink><Link to='/'>Home</Link></HomeLink>\n    <ExperienceLayoutHeader>{header}</ExperienceLayoutHeader>\n    <ExperienceLayoutSubtitle>{subtitle}</ExperienceLayoutSubtitle>\n    {children}\n  </Layout>\n)\n\nexport default ExperienceLayout;\n","import React from \"react\"\nimport styled from 'styled-components';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `StaticQuery`: https://gatsby.dev/staticquery\n */\n\nconst ImageWrapper = styled.img`\nmargin-top: 5px;\nmax-width: auto;\nmax-height: 500px;\n`;\n\nconst Image = ({ src }) => (\n  <ImageWrapper src={src}/>\n)\n\nexport default Image\n","module.exports = __webpack_public_path__ + \"static/livefeedEngagement-7c98d757adaeb6437011e87ff2e28994.png\";","module.exports = __webpack_public_path__ + \"static/livefeedTasks-3b629178a80a0300158e8d98f306ee4a.png\";"],"sourceRoot":""}